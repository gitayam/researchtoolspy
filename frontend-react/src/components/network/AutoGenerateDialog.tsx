import { useState, useEffect } from 'react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Checkbox } from '@/components/ui/checkbox'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Sparkles, CheckCircle, XCircle, AlertTriangle, ArrowRight } from 'lucide-react'
import type { CreateRelationshipRequest } from '@/types/entities'
import { bulkCreateRelationships, deduplicateRelationships, validateRelationship } from '@/utils/framework-relationships'

interface AutoGenerateDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  relationships: CreateRelationshipRequest[]
  source: 'MOM' | 'COG' | 'CAUSEWAY' | 'MIXED'
  onComplete?: (created: number, failed: number) => void
}

export function AutoGenerateDialog({
  open,
  onOpenChange,
  relationships: initialRelationships,
  source,
  onComplete
}: AutoGenerateDialogProps) {
  const [relationships, setRelationships] = useState<CreateRelationshipRequest[]>([])
  const [selectedIds, setSelectedIds] = useState<Set<number>>(new Set())
  const [processing, setProcessing] = useState(false)
  const [progress, setProgress] = useState({ current: 0, total: 0 })
  const [result, setResult] = useState<{ created: number; failed: number } | null>(null)

  // Initialize and deduplicate
  useEffect(() => {
    if (open) {
      const deduplicated = deduplicateRelationships(initialRelationships)
      setRelationships(deduplicated)
      // Select all by default
      setSelectedIds(new Set(deduplicated.map((_, i) => i)))
      setResult(null)
      setProgress({ current: 0, total: 0 })
    }
  }, [open, initialRelationships])

  const handleToggle = (index: number) => {
    const newSelected = new Set(selectedIds)
    if (newSelected.has(index)) {
      newSelected.delete(index)
    } else {
      newSelected.add(index)
    }
    setSelectedIds(newSelected)
  }

  const handleSelectAll = () => {
    setSelectedIds(new Set(relationships.map((_, i) => i)))
  }

  const handleDeselectAll = () => {
    setSelectedIds(new Set())
  }

  const handleGenerate = async () => {
    const selected = relationships.filter((_, i) => selectedIds.has(i))

    if (selected.length === 0) {
      alert('Please select at least one relationship to generate')
      return
    }

    setProcessing(true)
    setProgress({ current: 0, total: selected.length })

    try {
      const result = await bulkCreateRelationships(
        selected,
        (current, total, status) => {
          setProgress({ current, total })
        }
      )

      setResult(result)
      onComplete?.(result.created, result.failed)

      // Auto-close if all succeeded
      if (result.failed === 0) {
        setTimeout(() => {
          onOpenChange(false)
        }, 2000)
      }
    } catch (error) {
      console.error('Failed to generate relationships:', error)
      alert('An error occurred while generating relationships')
    } finally {
      setProcessing(false)
    }
  }

  const getSourceBadge = () => {
    const colors = {
      MOM: 'bg-blue-100 text-blue-800',
      COG: 'bg-purple-100 text-purple-800',
      CAUSEWAY: 'bg-green-100 text-green-800',
      MIXED: 'bg-gray-100 text-gray-800'
    }
    return colors[source]
  }

  const getConfidenceBadge = (confidence?: string) => {
    const colors = {
      CONFIRMED: 'bg-green-100 text-green-800',
      PROBABLE: 'bg-blue-100 text-blue-800',
      POSSIBLE: 'bg-yellow-100 text-yellow-800',
      SUSPECTED: 'bg-orange-100 text-orange-800'
    }
    return colors[confidence || 'POSSIBLE'] || colors.POSSIBLE
  }

  const validationIssues = relationships.map((rel, i) => ({
    index: i,
    validation: validateRelationship(rel)
  })).filter(v => !v.validation.valid)

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5" />
            Auto-Generate Relationships
          </DialogTitle>
          <DialogDescription>
            Review and create relationships automatically generated from {source} framework analysis
          </DialogDescription>
        </DialogHeader>

        {!result ? (
          <div className="space-y-4">
            {/* Summary */}
            <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <div className="flex items-center gap-3">
                <Badge className={getSourceBadge()}>
                  {source} Framework
                </Badge>
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  {relationships.length} relationships found
                </span>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" onClick={handleSelectAll}>
                  Select All
                </Button>
                <Button variant="outline" size="sm" onClick={handleDeselectAll}>
                  Deselect All
                </Button>
              </div>
            </div>

            {/* Validation Warnings */}
            {validationIssues.length > 0 && (
              <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3">
                <div className="flex items-center gap-2 mb-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <span className="text-sm font-semibold text-yellow-800 dark:text-yellow-200">
                    {validationIssues.length} validation issue(s)
                  </span>
                </div>
                <div className="text-xs text-yellow-700 dark:text-yellow-300 space-y-1">
                  {validationIssues.slice(0, 3).map(v => (
                    <div key={v.index}>
                      Relationship {v.index + 1}: {v.validation.errors.join(', ')}
                    </div>
                  ))}
                  {validationIssues.length > 3 && (
                    <div>... and {validationIssues.length - 3} more</div>
                  )}
                </div>
              </div>
            )}

            {/* Relationship List */}
            <ScrollArea className="h-[400px] border rounded-lg">
              <div className="p-4 space-y-2">
                {relationships.map((rel, index) => {
                  const validation = validateRelationship(rel)
                  const isSelected = selectedIds.has(index)

                  return (
                    <div
                      key={index}
                      className={`border rounded-lg p-3 ${
                        isSelected ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : 'border-gray-200'
                      } ${!validation.valid ? 'opacity-50' : ''}`}
                    >
                      <div className="flex items-start gap-3">
                        <Checkbox
                          checked={isSelected}
                          onCheckedChange={() => handleToggle(index)}
                          disabled={!validation.valid}
                          className="mt-1"
                        />
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2 text-sm">
                              <span className="font-medium">{rel.source_entity_type}</span>
                              <ArrowRight className="h-3 w-3" />
                              <Badge variant="outline" className="text-xs">
                                {rel.relationship_type}
                              </Badge>
                              <ArrowRight className="h-3 w-3" />
                              <span className="font-medium">{rel.target_entity_type}</span>
                            </div>
                            <Badge className={getConfidenceBadge(rel.confidence)}>
                              {rel.confidence || 'POSSIBLE'}
                            </Badge>
                          </div>

                          {rel.description && (
                            <p className="text-xs text-gray-600 dark:text-gray-400">
                              {rel.description}
                            </p>
                          )}

                          <div className="flex items-center gap-3 text-xs text-gray-500">
                            <span>Weight: {((rel.weight || 0.5) * 100).toFixed(0)}%</span>
                            {rel.start_date && <span>Date: {rel.start_date}</span>}
                          </div>

                          {!validation.valid && (
                            <div className="flex items-center gap-2 text-xs text-red-600">
                              <XCircle className="h-3 w-3" />
                              <span>{validation.errors.join(', ')}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </ScrollArea>

            {/* Progress */}
            {processing && (
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span>Creating relationships...</span>
                  <span>{progress.current} / {progress.total}</span>
                </div>
                <Progress value={(progress.current / progress.total) * 100} />
              </div>
            )}

            {/* Actions */}
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => onOpenChange(false)} disabled={processing}>
                Cancel
              </Button>
              <Button
                onClick={handleGenerate}
                disabled={processing || selectedIds.size === 0}
              >
                <Sparkles className="h-4 w-4 mr-2" />
                Generate {selectedIds.size} Relationship{selectedIds.size !== 1 ? 's' : ''}
              </Button>
            </div>
          </div>
        ) : (
          // Result Screen
          <div className="space-y-4 py-6">
            <div className="text-center">
              {result.failed === 0 ? (
                <CheckCircle className="h-16 w-16 text-green-600 mx-auto mb-4" />
              ) : (
                <AlertTriangle className="h-16 w-16 text-yellow-600 mx-auto mb-4" />
              )}
              <h3 className="text-xl font-semibold mb-2">
                {result.failed === 0 ? 'Success!' : 'Partially Complete'}
              </h3>
              <p className="text-gray-600 dark:text-gray-400 mb-6">
                {result.created} relationship{result.created !== 1 ? 's' : ''} created
                {result.failed > 0 && `, ${result.failed} failed`}
              </p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4 text-center">
                <div className="text-3xl font-bold text-green-600">{result.created}</div>
                <div className="text-sm text-green-700 dark:text-green-300">Created</div>
              </div>
              <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4 text-center">
                <div className="text-3xl font-bold text-red-600">{result.failed}</div>
                <div className="text-sm text-red-700 dark:text-red-300">Failed</div>
              </div>
            </div>

            <div className="flex justify-center gap-2 pt-4">
              <Button onClick={() => onOpenChange(false)}>
                Close
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  )
}
