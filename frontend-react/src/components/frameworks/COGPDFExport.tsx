import { Button } from '@/components/ui/button'
import { FileText, Loader2 } from 'lucide-react'
import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'
import type { COGAnalysis, CriticalVulnerability, NetworkEdge } from '@/types/cog-analysis'
import { useState } from 'react'

interface COGPDFExportProps {
  analysis: COGAnalysis
  vulnerabilities: CriticalVulnerability[]
  edges?: NetworkEdge[]
  variant?: 'default' | 'outline' | 'secondary'
  size?: 'default' | 'sm' | 'lg'
  className?: string
}

export function COGPDFExport({
  analysis,
  vulnerabilities,
  edges,
  variant = 'outline',
  size = 'default',
  className
}: COGPDFExportProps) {
  const [exporting, setExporting] = useState(false)

  const handleExport = async () => {
    setExporting(true)
    try {
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'letter'
      })

      // Define colors and styles
      const colors = {
        primary: [30, 58, 138], // Navy blue
        secondary: [100, 116, 139], // Slate
        accent: [239, 68, 68], // Red
        text: [31, 41, 55], // Gray-800
        light: [249, 250, 251], // Gray-50
      }

      let currentY = 20
      const pageWidth = pdf.internal.pageSize.getWidth()
      const pageHeight = pdf.internal.pageSize.getHeight()
      const margin = 20

      // Helper function to add new page with header/footer
      const addNewPage = () => {
        pdf.addPage()
        currentY = 20
        addPageNumber()
      }

      // Helper function to add page number
      const addPageNumber = () => {
        const pageNum = pdf.internal.pages.length - 1
        if (pageNum > 1) {
          pdf.setFontSize(9)
          pdf.setTextColor(100, 116, 139)
          pdf.text(`Page ${pageNum}`, pageWidth - margin - 10, pageHeight - 10)
        }
      }

      // Helper function to check if we need a new page
      const checkNewPage = (neededSpace: number) => {
        if (currentY + neededSpace > pageHeight - 30) {
          addNewPage()
          return true
        }
        return false
      }

      // ===== COVER PAGE =====
      pdf.setFillColor(...colors.primary)
      pdf.rect(0, 0, pageWidth, 80, 'F')

      pdf.setFontSize(24)
      pdf.setTextColor(255, 255, 255)
      pdf.setFont('helvetica', 'bold')
      pdf.text('CENTER OF GRAVITY', pageWidth / 2, 35, { align: 'center' })
      pdf.text('ANALYSIS REPORT', pageWidth / 2, 50, { align: 'center' })

      pdf.setFontSize(14)
      pdf.setFont('helvetica', 'normal')
      pdf.text(analysis.title, pageWidth / 2, 65, { align: 'center' })

      // Classification
      currentY = 100
      pdf.setFontSize(12)
      pdf.setTextColor(...colors.text)
      pdf.setFont('helvetica', 'bold')
      pdf.text('CLASSIFICATION:', margin, currentY)
      pdf.setFont('helvetica', 'normal')
      pdf.text('UNCLASSIFIED', margin + 50, currentY)

      currentY += 10
      pdf.setFont('helvetica', 'bold')
      pdf.text('DATE:', margin, currentY)
      pdf.setFont('helvetica', 'normal')
      pdf.text(new Date(analysis.created_at).toLocaleDateString(), margin + 50, currentY)

      currentY += 10
      pdf.setFont('helvetica', 'bold')
      pdf.text('SCORING SYSTEM:', margin, currentY)
      pdf.setFont('helvetica', 'normal')
      pdf.text(analysis.scoring_system.toUpperCase(), margin + 50, currentY)

      // Disclaimer
      currentY = pageHeight - 60
      pdf.setFontSize(9)
      pdf.setTextColor(100, 116, 139)
      pdf.setFont('helvetica', 'italic')
      const disclaimer = 'This document is generated for analytical purposes. Verify all information before operational use.'
      pdf.text(disclaimer, pageWidth / 2, currentY, { align: 'center', maxWidth: pageWidth - 40 })

      currentY = pageHeight - 40
      pdf.setFontSize(8)
      pdf.text('Generated by COG Analysis Tool', pageWidth / 2, currentY, { align: 'center' })
      pdf.text('https://github.com/gitayam/researchtoolspy', pageWidth / 2, currentY + 5, { align: 'center' })

      // ===== PAGE 2: EXECUTIVE SUMMARY =====
      addNewPage()
      currentY = 20

      pdf.setFontSize(18)
      pdf.setTextColor(...colors.primary)
      pdf.setFont('helvetica', 'bold')
      pdf.text('EXECUTIVE SUMMARY', margin, currentY)
      currentY += 12

      pdf.setFontSize(11)
      pdf.setTextColor(...colors.text)
      pdf.setFont('helvetica', 'normal')

      const execSummary = `This Center of Gravity (COG) analysis identifies and assesses ${analysis.centers_of_gravity.length} center(s) of gravity across ${new Set(analysis.centers_of_gravity.map(c => c.actor_category)).size} actor categor${new Set(analysis.centers_of_gravity.map(c => c.actor_category)).size === 1 ? 'y' : 'ies'}. The analysis examined ${analysis.critical_capabilities.length} critical capabilities, ${analysis.critical_requirements.length} critical requirements, and identified ${analysis.critical_vulnerabilities.length} critical vulnerabilities.`

      const lines = pdf.splitTextToSize(execSummary, pageWidth - 2 * margin)
      pdf.text(lines, margin, currentY)
      currentY += (lines.length * 6) + 8

      // Key Statistics
      pdf.setFont('helvetica', 'bold')
      pdf.text('KEY STATISTICS', margin, currentY)
      currentY += 8

      const stats = [
        ['Centers of Gravity:', analysis.centers_of_gravity.length.toString()],
        ['Critical Capabilities:', analysis.critical_capabilities.length.toString()],
        ['Critical Requirements:', analysis.critical_requirements.length.toString()],
        ['Critical Vulnerabilities:', analysis.critical_vulnerabilities.length.toString()],
      ]

      if (edges && edges.length > 0) {
        stats.push(['Network Edges:', edges.length.toString()])
      }

      pdf.setFont('helvetica', 'normal')
      stats.forEach(([label, value]) => {
        pdf.text(label, margin + 5, currentY)
        pdf.setFont('helvetica', 'bold')
        pdf.text(value, margin + 70, currentY)
        pdf.setFont('helvetica', 'normal')
        currentY += 6
      })

      currentY += 8

      // Top Vulnerabilities Summary
      pdf.setFont('helvetica', 'bold')
      pdf.text('TOP 5 VULNERABILITIES (BY COMPOSITE SCORE)', margin, currentY)
      currentY += 8

      const sortedVulns = [...vulnerabilities].sort((a, b) => b.composite_score - a.composite_score)
      const top5 = sortedVulns.slice(0, 5)

      pdf.setFont('helvetica', 'normal')
      top5.forEach((vuln, idx) => {
        const scoreColor = vuln.composite_score >= 12 ? colors.accent :
                          vuln.composite_score >= 9 ? [245, 158, 11] :
                          [16, 185, 129]

        pdf.setTextColor(...scoreColor)
        pdf.setFont('helvetica', 'bold')
        pdf.text(`${idx + 1}.`, margin + 5, currentY)
        pdf.setTextColor(...colors.text)
        pdf.setFont('helvetica', 'normal')

        const vulnText = pdf.splitTextToSize(vuln.vulnerability, pageWidth - 2 * margin - 30)
        pdf.text(vulnText, margin + 12, currentY)

        pdf.setFont('helvetica', 'bold')
        pdf.text(`Score: ${vuln.composite_score}`, pageWidth - margin - 30, currentY)

        currentY += Math.max(vulnText.length * 5, 5) + 3

        if (checkNewPage(20)) {
          pdf.setFont('helvetica', 'normal')
        }
      })

      // ===== PAGE 3: OPERATIONAL CONTEXT =====
      checkNewPage(100) || addNewPage()
      currentY = 20

      pdf.setFontSize(18)
      pdf.setTextColor(...colors.primary)
      pdf.setFont('helvetica', 'bold')
      pdf.text('1. OPERATIONAL CONTEXT', margin, currentY)
      currentY += 12

      pdf.setFontSize(11)
      pdf.setTextColor(...colors.text)
      pdf.setFont('helvetica', 'normal')

      const contextFields = [
        { label: '1.1 OBJECTIVE', value: analysis.operational_context.objective },
        { label: '1.2 DESIRED IMPACT', value: analysis.operational_context.desired_impact },
        { label: '1.3 OUR IDENTITY', value: analysis.operational_context.our_identity },
        { label: '1.4 OPERATING ENVIRONMENT', value: analysis.operational_context.operating_environment },
        { label: '1.5 TIMEFRAME', value: analysis.operational_context.timeframe },
        { label: '1.6 STRATEGIC LEVEL', value: analysis.operational_context.strategic_level },
      ]

      contextFields.forEach(field => {
        checkNewPage(30)

        pdf.setFont('helvetica', 'bold')
        pdf.text(field.label, margin, currentY)
        currentY += 6

        pdf.setFont('helvetica', 'normal')
        const fieldText = pdf.splitTextToSize(field.value || 'Not specified', pageWidth - 2 * margin - 5)
        pdf.text(fieldText, margin + 5, currentY)
        currentY += (fieldText.length * 5) + 8
      })

      // ===== SECTION 2: COG ANALYSIS BY ACTOR =====
      checkNewPage(80) || addNewPage()
      currentY = 20

      pdf.setFontSize(18)
      pdf.setTextColor(...colors.primary)
      pdf.setFont('helvetica', 'bold')
      pdf.text('2. CENTER OF GRAVITY ANALYSIS', margin, currentY)
      currentY += 12

      const actorCategories = ['friendly', 'adversary', 'host_nation', 'third_party'] as const
      const actorLabels = {
        friendly: 'Friendly Forces',
        adversary: 'Adversary',
        host_nation: 'Host Nation',
        third_party: 'Third Party',
      }

      actorCategories.forEach(actor => {
        const cogs = analysis.centers_of_gravity.filter(c => c.actor_category === actor)
        if (cogs.length === 0) return

        checkNewPage(60)

        pdf.setFontSize(14)
        pdf.setTextColor(...colors.primary)
        pdf.setFont('helvetica', 'bold')
        pdf.text(`2.${actorCategories.indexOf(actor) + 1} ${actorLabels[actor].toUpperCase()}`, margin, currentY)
        currentY += 10

        cogs.forEach((cog, cogIdx) => {
          checkNewPage(50)

          pdf.setFontSize(12)
          pdf.setTextColor(...colors.text)
          pdf.setFont('helvetica', 'bold')
          pdf.text(`COG ${cogIdx + 1}: ${cog.description || 'Unnamed COG'}`, margin + 5, currentY)
          currentY += 7

          pdf.setFontSize(10)
          pdf.setFont('helvetica', 'normal')
          pdf.text(`Domain: ${cog.domain}`, margin + 10, currentY)
          currentY += 6

          if (cog.rationale) {
            pdf.setFont('helvetica', 'italic')
            const rationaleText = pdf.splitTextToSize(`Rationale: ${cog.rationale}`, pageWidth - 2 * margin - 15)
            pdf.text(rationaleText, margin + 10, currentY)
            currentY += (rationaleText.length * 5) + 5
          }

          // Capabilities
          const relatedCaps = analysis.critical_capabilities.filter(c => c.cog_id === cog.id)
          if (relatedCaps.length > 0) {
            checkNewPage(30)

            pdf.setFont('helvetica', 'bold')
            pdf.text('Critical Capabilities:', margin + 10, currentY)
            currentY += 6

            relatedCaps.forEach((cap, capIdx) => {
              checkNewPage(20)

              pdf.setFont('helvetica', 'normal')
              const capText = pdf.splitTextToSize(`${capIdx + 1}. ${cap.capability}`, pageWidth - 2 * margin - 20)
              pdf.text(capText, margin + 15, currentY)
              currentY += (capText.length * 5) + 3
            })
          }

          currentY += 5
        })

        currentY += 5
      })

      // ===== SECTION 3: VULNERABILITY ASSESSMENT =====
      checkNewPage(80) || addNewPage()
      currentY = 20

      pdf.setFontSize(18)
      pdf.setTextColor(...colors.primary)
      pdf.setFont('helvetica', 'bold')
      pdf.text('3. VULNERABILITY ASSESSMENT', margin, currentY)
      currentY += 12

      pdf.setFontSize(11)
      pdf.setTextColor(...colors.text)
      pdf.setFont('helvetica', 'normal')

      const vulnIntro = `This section provides a prioritized assessment of ${vulnerabilities.length} identified critical vulnerabilities, ranked by composite score. Each vulnerability is linked to its parent requirement and capability.`
      const vulnIntroLines = pdf.splitTextToSize(vulnIntro, pageWidth - 2 * margin)
      pdf.text(vulnIntroLines, margin, currentY)
      currentY += (vulnIntroLines.length * 5) + 10

      // Vulnerability Table
      const vulnTableData = sortedVulns.slice(0, 20).map((vuln, idx) => {
        const requirement = analysis.critical_requirements.find(r => r.id === vuln.requirement_id)
        const capability = requirement ? analysis.critical_capabilities.find(c => c.id === requirement.capability_id) : null
        const cog = capability ? analysis.centers_of_gravity.find(c => c.id === capability.cog_id) : null

        return [
          (idx + 1).toString(),
          vuln.vulnerability.substring(0, 60) + (vuln.vulnerability.length > 60 ? '...' : ''),
          cog?.description?.substring(0, 30) || 'N/A',
          vuln.composite_score.toString(),
          vuln.vulnerability_type || 'N/A'
        ]
      })

      autoTable(pdf, {
        startY: currentY,
        head: [['#', 'Vulnerability', 'COG', 'Score', 'Type']],
        body: vulnTableData,
        theme: 'grid',
        headStyles: {
          fillColor: colors.primary,
          textColor: [255, 255, 255],
          fontStyle: 'bold',
          fontSize: 9
        },
        bodyStyles: {
          fontSize: 8,
          cellPadding: 2
        },
        columnStyles: {
          0: { cellWidth: 10 },
          1: { cellWidth: 80 },
          2: { cellWidth: 50 },
          3: { cellWidth: 15, halign: 'center' },
          4: { cellWidth: 25 }
        },
        didDrawCell: (data) => {
          if (data.column.index === 3 && data.section === 'body') {
            const score = parseInt(data.cell.text[0])
            if (score >= 12) {
              data.cell.styles.textColor = colors.accent
              data.cell.styles.fontStyle = 'bold'
            } else if (score >= 9) {
              data.cell.styles.textColor = [245, 158, 11]
              data.cell.styles.fontStyle = 'bold'
            }
          }
        }
      })

      currentY = (pdf as any).lastAutoTable.finalY + 10

      // ===== SECTION 4: RECOMMENDATIONS =====
      checkNewPage(80) || addNewPage()
      currentY = 20

      pdf.setFontSize(18)
      pdf.setTextColor(...colors.primary)
      pdf.setFont('helvetica', 'bold')
      pdf.text('4. RECOMMENDATIONS', margin, currentY)
      currentY += 12

      pdf.setFontSize(11)
      pdf.setTextColor(...colors.text)
      pdf.setFont('helvetica', 'normal')

      const topActionsVulns = sortedVulns
        .filter(v => v.recommended_actions)
        .slice(0, 10)

      topActionsVulns.forEach((vuln, idx) => {
        checkNewPage(35)

        pdf.setFont('helvetica', 'bold')
        pdf.text(`${idx + 1}. ${vuln.vulnerability}`, margin, currentY)
        currentY += 6

        pdf.setFont('helvetica', 'normal')
        const actionsText = pdf.splitTextToSize(`Recommended Actions: ${vuln.recommended_actions}`, pageWidth - 2 * margin - 5)
        pdf.text(actionsText, margin + 5, currentY)
        currentY += (actionsText.length * 5) + 3

        if (vuln.expected_effect) {
          pdf.setFont('helvetica', 'italic')
          const effectText = pdf.splitTextToSize(`Expected Effect: ${vuln.expected_effect}`, pageWidth - 2 * margin - 5)
          pdf.text(effectText, margin + 5, currentY)
          currentY += (effectText.length * 5) + 3
        }

        pdf.setFont('helvetica', 'normal')
        pdf.setFontSize(9)
        pdf.setTextColor(100, 116, 139)
        pdf.text(`Composite Score: ${vuln.composite_score} | Confidence: ${vuln.confidence_level || 'N/A'}`, margin + 5, currentY)
        currentY += 8
        pdf.setFontSize(11)
        pdf.setTextColor(...colors.text)
      })

      // ===== APPENDIX A: OPORD INTEGRATION =====
      checkNewPage(80) || addNewPage()
      currentY = 20

      pdf.setFontSize(18)
      pdf.setTextColor(...colors.primary)
      pdf.setFont('helvetica', 'bold')
      pdf.text('APPENDIX A - OPORD INTEGRATION', margin, currentY)
      currentY += 12

      pdf.setFontSize(11)
      pdf.setTextColor(...colors.text)
      pdf.setFont('helvetica', 'normal')

      const opordGuidance = [
        'This COG analysis can be integrated into your Operations Order (OPORD) as follows:',
        '',
        '1. SITUATION',
        '   a. Enemy Forces: Use adversary COG analysis from Section 2',
        '   b. Friendly Forces: Reference friendly COG analysis for own vulnerabilities',
        '',
        '2. MISSION',
        '   Use the Operational Context (Section 1) to inform mission statement',
        '',
        '3. EXECUTION',
        '   a. Commander\'s Intent: Leverage desired impact from operational context',
        '   b. Tasks: Prioritize actions based on vulnerability assessment (Section 3)',
        '   c. Coordinating Instructions: Reference recommended actions (Section 4)',
        '',
        '4. SUSTAINMENT',
        '   Identify logistics requirements from critical requirements analysis',
        '',
        '5. COMMAND AND SIGNAL',
        '   Consider information vulnerabilities from analysis',
        '',
        'TARGETING GUIDANCE:',
        '- Focus efforts on high-priority vulnerabilities (Score >= 12)',
        '- Target critical requirements that support multiple capabilities',
        '- Exploit cascading effects identified in network analysis',
        '- Reassess COG validity after major operational changes'
      ]

      opordGuidance.forEach(line => {
        checkNewPage(10)
        pdf.text(line, margin, currentY)
        currentY += 5
      })

      // Add page numbers to all pages
      const totalPages = pdf.internal.pages.length - 1
      for (let i = 2; i <= totalPages; i++) {
        pdf.setPage(i)
        addPageNumber()
      }

      // Save PDF
      const filename = `${analysis.title.replace(/[^a-z0-9]/gi, '_')}-COG-Report.pdf`
      pdf.save(filename)

    } catch (error) {
      console.error('PDF export error:', error)
      alert('Failed to export PDF. Please try again.')
    } finally {
      setExporting(false)
    }
  }

  return (
    <Button
      variant={variant}
      size={size}
      onClick={handleExport}
      disabled={exporting}
      className={className}
    >
      {exporting ? (
        <>
          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          Generating...
        </>
      ) : (
        <>
          <FileText className="h-4 w-4 mr-2" />
          Export PDF Report
        </>
      )}
    </Button>
  )
}
