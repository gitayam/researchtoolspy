import { useMemo, useState } from 'react'
import { Download, ArrowUpDown, Filter } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import type {
  COGAnalysis,
  CriticalVulnerability,
  ActorCategory,
  DIMEFILDomain,
} from '@/types/cog-analysis'

interface EnrichedVulnerability extends CriticalVulnerability {
  cog_name: string
  cog_actor: ActorCategory
  cog_domain: DIMEFILDomain
  capability_name: string
  requirement_name: string
}

interface COGVulnerabilityMatrixProps {
  data: COGAnalysis
}

type SortField = 'composite_score' | 'impact_on_cog' | 'attainability' | 'follow_up_potential' | 'cog_name' | 'vulnerability'
type SortDirection = 'asc' | 'desc'

export function COGVulnerabilityMatrix({ data }: COGVulnerabilityMatrixProps) {
  const [sortField, setSortField] = useState<SortField>('composite_score')
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc')
  const [filterActor, setFilterActor] = useState<ActorCategory | 'all'>('all')
  const [filterDomain, setFilterDomain] = useState<DIMEFILDomain | 'all'>('all')
  const [filterCOG, setFilterCOG] = useState<string>('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [minScore, setMinScore] = useState<number | ''>('')
  const [maxScore, setMaxScore] = useState<number | ''>('')

  // Enrich vulnerabilities with COG/capability/requirement context
  const enrichedVulnerabilities = useMemo((): EnrichedVulnerability[] => {
    const enriched: EnrichedVulnerability[] = []

    data.critical_vulnerabilities.forEach(vuln => {
      const requirement = data.critical_requirements.find(r => r.id === vuln.requirement_id)
      if (!requirement) return

      const capability = data.critical_capabilities.find(c => c.id === requirement.capability_id)
      if (!capability) return

      const cog = data.centers_of_gravity.find(cog => cog.id === capability.cog_id)
      if (!cog) return

      enriched.push({
        ...vuln,
        cog_name: `${cog.actor_category} - ${cog.domain}`,
        cog_actor: cog.actor_category,
        cog_domain: cog.domain,
        capability_name: capability.capability,
        requirement_name: requirement.requirement,
      })
    })

    return enriched
  }, [data])

  // Apply filters
  const filteredVulnerabilities = useMemo(() => {
    return enrichedVulnerabilities.filter(vuln => {
      // Actor filter
      if (filterActor !== 'all' && vuln.cog_actor !== filterActor) return false

      // Domain filter
      if (filterDomain !== 'all' && vuln.cog_domain !== filterDomain) return false

      // COG filter
      if (filterCOG !== 'all' && vuln.cog_name !== filterCOG) return false

      // Score range filter
      if (minScore !== '' && vuln.composite_score < minScore) return false
      if (maxScore !== '' && vuln.composite_score > maxScore) return false

      // Search filter
      if (searchTerm) {
        const search = searchTerm.toLowerCase()
        return (
          vuln.vulnerability.toLowerCase().includes(search) ||
          vuln.description.toLowerCase().includes(search) ||
          vuln.cog_name.toLowerCase().includes(search) ||
          vuln.capability_name.toLowerCase().includes(search) ||
          vuln.requirement_name.toLowerCase().includes(search)
        )
      }

      return true
    })
  }, [enrichedVulnerabilities, filterActor, filterDomain, filterCOG, minScore, maxScore, searchTerm])

  // Apply sorting
  const sortedVulnerabilities = useMemo(() => {
    const sorted = [...filteredVulnerabilities]

    sorted.sort((a, b) => {
      let aVal: any
      let bVal: any

      switch (sortField) {
        case 'composite_score':
          aVal = a.composite_score
          bVal = b.composite_score
          break
        case 'impact_on_cog':
          aVal = a.scoring.impact_on_cog
          bVal = b.scoring.impact_on_cog
          break
        case 'attainability':
          aVal = a.scoring.attainability
          bVal = b.scoring.attainability
          break
        case 'follow_up_potential':
          aVal = a.scoring.follow_up_potential
          bVal = b.scoring.follow_up_potential
          break
        case 'cog_name':
          aVal = a.cog_name
          bVal = b.cog_name
          break
        case 'vulnerability':
          aVal = a.vulnerability
          bVal = b.vulnerability
          break
        default:
          aVal = a.composite_score
          bVal = b.composite_score
      }

      if (typeof aVal === 'string' && typeof bVal === 'string') {
        return sortDirection === 'asc'
          ? aVal.localeCompare(bVal)
          : bVal.localeCompare(aVal)
      }

      return sortDirection === 'asc' ? aVal - bVal : bVal - aVal
    })

    return sorted
  }, [filteredVulnerabilities, sortField, sortDirection])

  // Get unique COG names for filter
  const uniqueCOGs = useMemo(() => {
    return Array.from(new Set(enrichedVulnerabilities.map(v => v.cog_name)))
  }, [enrichedVulnerabilities])

  // Get score color class
  const getScoreColorClass = (score: number): string => {
    const maxPossibleScore = data.scoring_system === 'linear' ? 15 : 36
    const percentage = (score / maxPossibleScore) * 100

    if (percentage >= 80) return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
    if (percentage >= 60) return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
    if (percentage >= 40) return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
    if (percentage >= 20) return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
    return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200'
  }

  // Toggle sort
  const toggleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('desc')
    }
  }

  // Export to CSV
  const exportToCSV = () => {
    const headers = [
      'Rank',
      'COG',
      'Actor',
      'Domain',
      'Capability',
      'Requirement',
      'Vulnerability',
      'Type',
      'Description',
      'Composite Score',
      'Impact',
      'Attainability',
      'Follow-up',
      'Expected Effect',
      'Recommended Actions',
      'Confidence',
    ]

    const rows = sortedVulnerabilities.map((vuln, index) => [
      index + 1,
      vuln.cog_name,
      vuln.cog_actor,
      vuln.cog_domain,
      vuln.capability_name,
      vuln.requirement_name,
      vuln.vulnerability,
      vuln.vulnerability_type,
      vuln.description,
      vuln.composite_score,
      vuln.scoring.impact_on_cog,
      vuln.scoring.attainability,
      vuln.scoring.follow_up_potential,
      vuln.expected_effect || '',
      vuln.recommended_actions?.join('; ') || '',
      vuln.confidence || '',
    ])

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    link.href = URL.createObjectURL(blob)
    link.download = `vulnerability-matrix-${data.title.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.csv`
    link.click()
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Vulnerability Comparison Matrix</CardTitle>
              <CardDescription>
                Compare and prioritize vulnerabilities across all Centers of Gravity
              </CardDescription>
            </div>
            <Button onClick={exportToCSV} variant="outline" size="sm">
              <Download className="mr-2 h-4 w-4" />
              Export CSV
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Filters */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-lg">
            <div className="space-y-2">
              <Label>Search</Label>
              <Input
                placeholder="Search vulnerabilities..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label>Actor</Label>
              <Select value={filterActor} onValueChange={(value) => setFilterActor(value as ActorCategory | 'all')}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Actors</SelectItem>
                  <SelectItem value="friendly">Friendly</SelectItem>
                  <SelectItem value="adversary">Adversary</SelectItem>
                  <SelectItem value="host_nation">Host Nation</SelectItem>
                  <SelectItem value="third_party">Third Party</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Domain</Label>
              <Select value={filterDomain} onValueChange={(value) => setFilterDomain(value as DIMEFILDomain | 'all')}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Domains</SelectItem>
                  <SelectItem value="diplomatic">Diplomatic</SelectItem>
                  <SelectItem value="information">Information</SelectItem>
                  <SelectItem value="military">Military</SelectItem>
                  <SelectItem value="economic">Economic</SelectItem>
                  <SelectItem value="financial">Financial</SelectItem>
                  <SelectItem value="intelligence">Intelligence</SelectItem>
                  <SelectItem value="law_enforcement">Law Enforcement</SelectItem>
                  <SelectItem value="cyber">Cyber</SelectItem>
                  <SelectItem value="space">Space</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>COG</Label>
              <Select value={filterCOG} onValueChange={setFilterCOG}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All COGs</SelectItem>
                  {uniqueCOGs.map(cog => (
                    <SelectItem key={cog} value={cog}>{cog}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Min Score</Label>
              <Input
                type="number"
                placeholder="Min"
                value={minScore}
                onChange={(e) => setMinScore(e.target.value ? Number(e.target.value) : '')}
              />
            </div>

            <div className="space-y-2">
              <Label>Max Score</Label>
              <Input
                type="number"
                placeholder="Max"
                value={maxScore}
                onChange={(e) => setMaxScore(e.target.value ? Number(e.target.value) : '')}
              />
            </div>

            <div className="flex items-end">
              <Button
                variant="outline"
                onClick={() => {
                  setSearchTerm('')
                  setFilterActor('all')
                  setFilterDomain('all')
                  setFilterCOG('all')
                  setMinScore('')
                  setMaxScore('')
                }}
              >
                <Filter className="mr-2 h-4 w-4" />
                Clear Filters
              </Button>
            </div>

            <div className="flex items-end justify-end">
              <div className="text-sm text-gray-600 dark:text-gray-400">
                Showing {sortedVulnerabilities.length} of {enrichedVulnerabilities.length} vulnerabilities
              </div>
            </div>
          </div>

          {/* Table */}
          <div className="overflow-x-auto border rounded-lg">
            <table className="w-full text-sm">
              <thead className="bg-gray-50 dark:bg-gray-900">
                <tr>
                  <th className="px-4 py-3 text-left font-medium">Rank</th>
                  <th className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800" onClick={() => toggleSort('composite_score')}>
                    <div className="flex items-center gap-2">
                      Score
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800" onClick={() => toggleSort('cog_name')}>
                    <div className="flex items-center gap-2">
                      COG
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-left font-medium">Capability</th>
                  <th className="px-4 py-3 text-left font-medium">Requirement</th>
                  <th className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800" onClick={() => toggleSort('vulnerability')}>
                    <div className="flex items-center gap-2">
                      Vulnerability
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800" onClick={() => toggleSort('impact_on_cog')}>
                    <div className="flex items-center gap-2">
                      I
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800" onClick={() => toggleSort('attainability')}>
                    <div className="flex items-center gap-2">
                      A
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-left font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800" onClick={() => toggleSort('follow_up_potential')}>
                    <div className="flex items-center gap-2">
                      F
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-left font-medium">Type</th>
                  <th className="px-4 py-3 text-left font-medium">Confidence</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-800">
                {sortedVulnerabilities.map((vuln, index) => (
                  <tr key={vuln.id} className="hover:bg-gray-50 dark:hover:bg-gray-900">
                    <td className="px-4 py-3 text-gray-600 dark:text-gray-400">#{index + 1}</td>
                    <td className="px-4 py-3">
                      <Badge className={getScoreColorClass(vuln.composite_score)}>
                        {vuln.composite_score}
                      </Badge>
                    </td>
                    <td className="px-4 py-3">
                      <div className="font-medium">{vuln.cog_name}</div>
                    </td>
                    <td className="px-4 py-3 max-w-xs truncate" title={vuln.capability_name}>
                      {vuln.capability_name}
                    </td>
                    <td className="px-4 py-3 max-w-xs truncate" title={vuln.requirement_name}>
                      {vuln.requirement_name}
                    </td>
                    <td className="px-4 py-3">
                      <div className="font-medium">{vuln.vulnerability}</div>
                      <div className="text-xs text-gray-600 dark:text-gray-400 max-w-md truncate" title={vuln.description}>
                        {vuln.description}
                      </div>
                    </td>
                    <td className="px-4 py-3 text-center">{vuln.scoring.impact_on_cog}</td>
                    <td className="px-4 py-3 text-center">{vuln.scoring.attainability}</td>
                    <td className="px-4 py-3 text-center">{vuln.scoring.follow_up_potential}</td>
                    <td className="px-4 py-3">
                      <Badge variant="outline">{vuln.vulnerability_type}</Badge>
                    </td>
                    <td className="px-4 py-3">
                      {vuln.confidence && (
                        <Badge
                          variant="outline"
                          className={
                            vuln.confidence === 'confirmed' ? 'border-green-500 text-green-700' :
                            vuln.confidence === 'high' ? 'border-blue-500 text-blue-700' :
                            vuln.confidence === 'medium' ? 'border-yellow-500 text-yellow-700' :
                            'border-gray-500 text-gray-700'
                          }
                        >
                          {vuln.confidence}
                        </Badge>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {sortedVulnerabilities.length === 0 && (
              <div className="text-center py-12 text-gray-500 dark:text-gray-400">
                No vulnerabilities match the current filters
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
