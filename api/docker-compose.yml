version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: omnicore-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-omnicore}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-omnicore_dev}
      POSTGRES_DB: ${POSTGRES_DB:-omnicore}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-omnicore}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - omnicore-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: omnicore-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - omnicore-network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: omnicore-api
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-omnicore}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-omnicore_dev}
      - POSTGRES_DB=${POSTGRES_DB:-omnicore}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-5-mini}
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - omnicore-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker (for background tasks)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: omnicore-celery
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-omnicore}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-omnicore_dev}
      - POSTGRES_DB=${POSTGRES_DB:-omnicore}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-5-mini}
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - omnicore-network
    command: celery -A app.workers.celery_app worker --loglevel=info

  # pgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: omnicore-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@omnicore.dev}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - omnicore-network
    profiles:
      - dev

networks:
  omnicore-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: